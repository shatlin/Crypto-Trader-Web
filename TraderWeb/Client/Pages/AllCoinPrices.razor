@page "/allcoinprices"
@inject ISignalService SignalService
@inject NavigationManager NavigationManager
@using System.Threading;
<PageTitle Value="Coin Prices" />
@{
	string headerstyle = "text-warning small font-weight-bold sort-link";
}
@if (CoinPrices.Count == 0)
{
	<Loader></Loader>
}
else
{
	<table class="table table-sm table-borderless">
		<thead>
			<tr class="p-0 m-0 ">
				<td class=@headerstyle @onclick='(()=>SortTable("Pair"))'>Pair</td>
				<td class=@headerstyle>Cr Pr</td>
				<td class=@headerstyle>Day Low</td>
				<td class=@headerstyle>Day High</td>
				<td class=@headerstyle>Last 5 1M Dwn?</td>
				<td class=@headerstyle>1M Gng Dwn?</td>
				<td class=@headerstyle>Last 5 5M Dwn?</td>
				<td class=@headerstyle>5M Gng Dwn?</td>
				<td class=@headerstyle>Last 5 15M Dwn?</td>
				<td class=@headerstyle>15M Gng Dwn?</td>
				<td class=@headerstyle>Last 5 30M Dwn?</td>
				<td class=@headerstyle>30M Gng Dwn?</td>
				<td class=@headerstyle>Last 5 1Hr Dwn?</td>
				<td class=@headerstyle>1Hr Gng Dwn?</td>
				<td class=@headerstyle>Last 5 4Hr Dwn?</td>
				<td class=@headerstyle>4Hr Gng Dwn?</td>
				<td class=@headerstyle @onclick='(()=>SortTable("ThirtyMinPriceChange"))'>12Hr Change </td>
				<td class=@headerstyle @onclick='(()=>SortTable("OneHourPriceChange"))'>24Hr Change </td>
				<td class=@headerstyle @onclick='(()=>SortTable("FourHourPriceChange"))'>48Hr Change </td>
				<td class=@headerstyle @onclick='(()=>SortTable("DayPriceChange"))'>7Day Change </td>
				<td class=@headerstyle @onclick='(()=>SortTable("PriceChangeNumber"))'>Price Change </td>
			</tr>
		</thead>
		<tbody>
			@foreach (var coinprice in CoinPrices)
			{
				<tr>
					<td class="p-0 pr-3  text-light">
						@{
							string link = "https://www.binance.com/en/trade/" + @coinprice.Pair.Replace("USDT", "_USDT") + "?layout=pro&type=spot";
						}
						<a href=@link target="_blank&" class=" font-weight-bold small text-success p-0 pl-1 pr-1 m-0"> @coinprice.Pair.Replace("USDT", "")</a>
					</td>

					<td class="p-0 small  text-light">@Math.Round(coinprice.ClosePrice,3)</td>
					<td class="p-0 small  text-light">@Math.Round(coinprice.DayMin,3)</td>
					<td class="p-0 small  text-light">@Math.Round(coinprice.DayMax,3)</td>
					<CoinTDBool check=coinprice.IsLast5OneMinOnDownTrend> </CoinTDBool>
					<CoinTDBool check=coinprice.IsOneMinOnDownTrend> </CoinTDBool>
					<CoinTDBool check=coinprice.IsLast5FiveMinOnDownTrend> </CoinTDBool>
					<CoinTDBool check=coinprice.IsFiveMinOnDownTrend> </CoinTDBool>
					<CoinTDBool check=coinprice.IsLast5FifteenMinOnDownTrend> </CoinTDBool>
					<CoinTDBool check=coinprice.IsFifteenMinOnDownTrend> </CoinTDBool>
					<CoinTDBool check=coinprice.IsLast5ThirtyMinOnDownTrend> </CoinTDBool>
					<CoinTDBool check=coinprice.IsThirtyMinOnDownTrend> </CoinTDBool>
					<CoinTDBool check=coinprice.IsLast5OneHourOnDownTrend> </CoinTDBool>
					<CoinTDBool check=coinprice.IsOneHourOnDownTrend> </CoinTDBool>
					<CoinTDBool check=coinprice.IsLast5FourHourOnDownTrend> </CoinTDBool>
					<CoinTDBool check=coinprice.IsFourHourOnDownTrend> </CoinTDBool>
					<CoinTDDec value=coinprice.ThirtyMinPriceChange></CoinTDDec>
					<CoinTDDec value=coinprice.OneHourPriceChange></CoinTDDec>
					<CoinTDDec value=coinprice.FourHourPriceChange></CoinTDDec>
					<CoinTDDec value=coinprice.DayPriceChange></CoinTDDec>
					<CoinTDDec value=coinprice.PriceChangeNumber></CoinTDDec>
				</tr>
			}
		</tbody>
	</table>
}

@code {



	public List<CoinPrice> CoinPrices { get; set; } = new List<CoinPrice>();
	private bool IsSortedAscending;
	private string CurrentSortColumn;



	private void SortTable(string columnName)
	{
		//Sorting against a column that is not currently sorted against.
		if (columnName != CurrentSortColumn)
		{
			//We need to force order by ascending on the new column
			//This line uses reflection and will probably
			//perform inefficiently in a production environment.
			CoinPrices = CoinPrices.OrderBy(x =>
									x.GetType()
									.GetProperty(columnName)
									.GetValue(x, null))
								.ToList();
			CurrentSortColumn = columnName;
			IsSortedAscending = true;

		}
		else //Sorting against same column but in different direction
		{
			if (IsSortedAscending)
			{
				CoinPrices = CoinPrices.OrderByDescending(x =>
														x.GetType()
															.GetProperty(columnName)
															.GetValue(x, null))
								.ToList();
			}
			else
			{
				CoinPrices = CoinPrices.OrderBy(x =>
										x.GetType()
											.GetProperty(columnName)
											.GetValue(x, null))
											.ToList();
			}

			//Toggle this boolean
			IsSortedAscending = !IsSortedAscending;
		}
	}

	protected override async Task OnInitializedAsync()
	{
		//System.Timers.Timer t = new System.Timers.Timer();
		//t.Interval = 180000;
		//t.Elapsed += async (s, e) =>
		//{
		//	CoinPrices = await SignalService.GetCoinPrices();
			
		//};

		//t.Start();
		CoinPrices = await SignalService.GetCoinPrices();
	}


	//private async Task RefreshCoinSignals()
	//{
	//	try
	//	{
	//		CoinPrices = await SignalService.GetCoinPrices();
	//	}
	//	catch (Exception ex)
	//	{
	//		Console.WriteLine(ex.Message);
	//	}

	//}

}
